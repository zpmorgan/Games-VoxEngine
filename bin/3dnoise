#!/opt/perl/bin/perl
package renderer;
use common::sense;
use AnyEvent;
use SDL;
use SDLx::App;
use SDL::Mouse;
use SDL::Event;
use OpenGL qw/:all/;
use OpenGL::List;

our $APP;
our $SDLE;
our $W = 800;
our $H = 600;

sub setup {
   $APP = SDLx::App->new (
      title  => "Layered 3D Noise",
      width  => $W,
      height => $H,
      gl     => 1
   );

   SDL::Events::enable_unicode (1);
   $SDLE = SDL::Event->new;
   SDL::Video::GL_set_attribute (SDL::Constants::SDL_GL_SWAP_CONTROL, 1);
   SDL::Video::GL_set_attribute (SDL::Constants::SDL_GL_DOUBLEBUFFER, 1);

   glDepthFunc (GL_LESS);
   glEnable (GL_DEPTH_TEST);
   glDisable (GL_DITHER);

   glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
   glEnable (GL_BLEND);
   glEnable (GL_CULL_FACE);
   glCullFace (GL_BACK);

   glHint (GL_PERSPECTIVE_CORRECTION_HINT, GL_FASTEST);
   glDisable (GL_TEXTURE_2D);
   glDisable (GL_FOG);
   glClearColor (0,0,0,1);
   glClearDepth (1.0);
   glShadeModel (GL_FLAT);
}

our @VERTS;
our $SIDELEN;

our @PARAMS;
our $RECALC;
our $SAVE_CB;

our ($SKIPV, $CARVE_OFFS);

sub set_save_cb {
   $SAVE_CB = shift;
}

sub set_recalc_cb {
   my ($slen, $sd, $p, $cb) = @_;
   (@PARAMS) = ($slen, $sd, $p);
   $RECALC = $cb;
   recalc ();
}

sub recalc {
   $SIDELEN = $RECALC->(@PARAMS);
   update_geometry ();
}

sub update_geometry {
   my ($skipv, $carve) = ($SKIPV, $CARVE_OFFS);
   warn "Constructing geometry (@$skipv, carving $carve)\n";
   $carve *= 1;
   main::render_model (@{$skipv || [0,0,0]}, $carve);
}

our @ROTATION;
our @TRANSLAT;

sub default_translation {
   (@TRANSLAT) = (0, 0, -$SIDELEN * 1.5);
}

sub render {
   glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

   glMatrixMode (GL_PROJECTION);
   glLoadIdentity;
   gluPerspective (60, $W / $H, 0.1, 1000);

   glMatrixMode (GL_MODELVIEW);
   glLoadIdentity;
   glPushMatrix;

   glTranslatef (@TRANSLAT);
   glRotatef ($ROTATION[0], 0, 1, 0);
   glRotatef ($ROTATION[1], 1, 0, 0);
   glTranslatef (-($SIDELEN / 2), -($SIDELEN / 2), -($SIDELEN / 2));

   main::show_model ();

   glPopMatrix;
}

sub start_loop {
   my $cv = AE::cv;

   update_geometry;
   default_translation;

   my $ROT;
   my $TRANS;
   my $SKIPL;

   my $keyactions;
   $keyactions = AE::timer 0, 0.02, sub {
      if ($ROT) {
         $ROTATION[0] += $ROT->[0];
         $ROTATION[1] += $ROT->[1];
      }

      if ($TRANS) {
         $TRANSLAT[0] += $TRANS->[0];
         $TRANSLAT[1] += $TRANS->[1];
         $TRANSLAT[2] += $TRANS->[2];
      }
   };

   my $skipanim;
   $skipanim = AE::timer 0, 0.25, sub {
      if ($SKIPL) {
         my $change = grep { $_ > 0 } @$SKIPL;

         for (0..2) {
            $SKIPV->[$_] += $SKIPL->[$_];
            if ($SKIPV->[$_] >= $SIDELEN) {
               $SKIPV->[$_] = 0;
            }
         }

         update_geometry if $change
      }
   };

   my $evpoll;
   $evpoll = AE::timer 0, 0.04, sub {
      SDL::Events::pump_events ();

      while (SDL::Events::poll_event ($SDLE)) {
         my $type = $SDLE->type;
         my $key  = ($type == 2 || $type == 3) ? $SDLE->key_sym : "";

         if ($type == 4) { # mouse motion

         } elsif ($type == 2) { # key down
            my $name = SDL::Events::get_key_name ($key);
            ($name eq "q" || $name eq 'escape') and exit;

            if ($name eq 'up') {
               $ROT->[1] += 1;
            } elsif ($name eq 'down') {
               $ROT->[1] -= 1;
            } elsif ($name eq 'left') {
               $ROT->[0] += 1;
            } elsif ($name eq 'right') {
               $ROT->[0] -= 1;
            } elsif ($name eq 'backspace') {
               undef $ROT;
               @ROTATION = (0,0);
               default_translation;
            } elsif ($name eq 'w') {
               $TRANS->[2] += 1;
            } elsif ($name eq 's') {
               $TRANS->[2] -= 1;
            } elsif ($name eq 'a') {
               $TRANS->[0] -= 1;
            } elsif ($name eq 'd') {
               $TRANS->[0] += 1;
            } elsif ($name eq 'v') {
               $SKIPV = [0,0,0];
               $SKIPL = [0,0,0];
               update_geometry;
            } elsif ($name eq 'y') {
               $SKIPL->[0] = not $SKIPL->[0];
            } elsif ($name eq 'x') {
               $SKIPL->[1] = not $SKIPL->[1];
            } elsif ($name eq 'c') {
               $SKIPL->[2] = not $SKIPL->[2];
            } elsif ($name eq '+') {
               $CARVE_OFFS += 0.02;
               update_geometry;
            } elsif ($name eq '-') {
               $CARVE_OFFS -= 0.02;
               update_geometry;
            } elsif ($name eq '#') {
               if ($CARVE_OFFS < 0) {
                  $CARVE_OFFS = (1 + $CARVE_OFFS);
               } else {
                  $CARVE_OFFS = -1 * (1 - $CARVE_OFFS);
               }
               update_geometry;
            } elsif ($name eq 'n') {
               $PARAMS[0] += 1;
               recalc ();
            } elsif ($name eq 'm') {
               $PARAMS[0] -= 1;
               recalc ();
            } elsif ($name eq 't') {
               $PARAMS[1] += 1;
               recalc ();
            } elsif ($name eq 'g') {
               $PARAMS[1] -= 1;
               recalc ();
            } elsif ($name eq 'u') {
               $PARAMS[2] += 0.05;
               $PARAMS[2] = 1 if $PARAMS[2] > 1;
               recalc ();
            } elsif ($name eq 'i') {
               $PARAMS[2] -= 0.05;
               $PARAMS[2] = 0 if $PARAMS[2] < 0;
               recalc ();
            } elsif ($name eq 'e') {
               $SAVE_CB->($SIDELEN);
            }

         } elsif ($type == 3) { # key up
            my $name = SDL::Events::get_key_name ($key);

            if ($name eq 'w' || $name eq 's') {
               $TRANS->[2] = 0;
            } elsif ($name eq 'a' || $name eq 'd') {
               $TRANS->[0] = 0;
            } elsif ($name eq 'up' || $name eq 'down') {
               $ROT->[1] = 0;
            } elsif ($name eq 'left' || $name eq 'right') {
               $ROT->[0] = 0;
            }
         } elsif ($type == SDL_MOUSEBUTTONUP) {

         } elsif ($type == SDL_MOUSEBUTTONDOWN) {

         } elsif ($type == 12) {
            warn "Exit event!\n";
            exit;
         } else {
            warn "unknown sdl type: $type\n";
         }
      }
   };


   my $tmr;
   $tmr = AE::timer 0, 0.01, sub {
      render ();
      $APP->sync;
   };

   $cv->recv;
}

package main;
use Games::VoxEngine;
use Alien::SDL;
use Inline C =>
       Config
          => LIBS => Alien::SDL->config ('libs') . ' -lm', #"-lm " . `sdl-config --libs`
          => INC  => Alien::SDL->config ('cflags');#`sdl-config --cflags`;
use Inline 'C';
use common::sense;

sub save_model {
   my $slen = shift;
   my $file = "3dnoise.out";
   open my $f, ">", $file
      or die "Couldn't save to $file: $!\n";
   my $str = "$slen\n";
   for (my $x = 0; $x < $slen; $x++) {
      for (my $y = 0; $y < $slen; $y++) {
         for (my $z = 0; $z < $slen; $z++) {
            $str .= sprintf "%.20f ", get_model ($x, $y, $z);
         }
         $str .= "\n";
      }
      $str .= "\n\n";
   }
   print $f $str;
   close $f;
   warn "wrote output to $file\n";
}

sub load_model {
   my ($data) = @_;
   my ($slen, @nums) = split /\s+/, $data;
   alloc_model ($slen);
   for (my $x = 0; $x < $slen; $x++) {
      for (my $y = 0; $y < $slen; $y++) {
         for (my $z = 0; $z < $slen; $z++) {
            add_model ($x, $y, $z, shift @nums);
         }
      }
   }
   return $slen;
}

warn "making 3d noise\n";
my $cube = $ARGV[1] || 30;

Games::VoxEngine::VolDraw::init ();
renderer::setup;
init_c_renderer ();
renderer::set_save_cb (sub { save_model (@_); });

my $MODEL_DATA;
my $MODEL_DATA_SLEN;

if ($ARGV[0] eq '-') {
   my $in = do { local $/; <STDIN> };
   $MODEL_DATA_SLEN = load_model ($in);
   $MODEL_DATA = $in;
   warn "loaded model from stdin.\n";
}

my $edit_file = $ARGV[0];
my $filter_file = $ARGV[2];
if ($ARGV[3] eq 'pid') {
   system ("echo $$ > /tmp/3dnoise.pid");
}

my $ltime = -M $edit_file;

my $t;
$t = AE::timer 0, 0.5, sub {
    my $ntime = -M $edit_file;
    if ($ltime != $ntime) {
      my $nt;
      $nt = AE::timer 0.1, 0, sub {
        renderer::recalc ();
        undef $nt;
      }
    };
    $ltime = $ntime;
};

renderer::set_recalc_cb ($cube, $ARGV[0], 0, sub {
   my ($cube, $seed, $param) = @_;

   if ($MODEL_DATA) {
      warn "showing model.\n";
      return $MODEL_DATA_SLEN;
   }

   warn "VARS: size $cube, seed $seed, param $param\n";

   alloc_model ($cube);

   Games::VoxEngine::VolDraw::alloc ($cube);

   my $filter_cmds = "";
   if (open my $f, "<", $filter_file) {
      $filter_cmds = do { local $/; <$f> };
   }

   if (open my $f, "<", $edit_file) {
     Games::VoxEngine::VolDraw::draw_commands (
       do { local $/; <$f> }
       . "\n$filter_cmds",
       { size => $cube, seed => $seed, param => $param }
     );

   } else {
     warn "Couldn't open file: $!\n";
   }

   my $m = get_model_ptr ();
   Games::VoxEngine::VolDraw::copy ($m);

   $cube
});

renderer::start_loop;

__END__
__C__
#include <SDL_opengl.h>
#include <math.h>

static int        sidelen     = 0;
static double    *model       = 0;
static GLdouble  *vertexes    = 0;
static GLdouble  *colors      = 0;
static GLuint    *vertex_idx  = 0;
static int        vertex_idxs = 0;
static GLuint dl;
static dl_dirty = 1;
#define OFFS(x,y,z) ((x) + (y) * sidelen + (z) * (sidelen * sidelen))

void init_c_renderer ()
{
  dl = glGenLists (1);
}

void alloc_model (int slen)
{
  if (model)
    {
      free (model);
      free (vertexes);
      free (vertex_idx);
      free (colors);
    }
  sidelen = slen;
  model = malloc (sizeof (double) * sidelen * sidelen * sidelen);
  memset (model, 0, sizeof (double) * sidelen * sidelen * sidelen);

  vertexes   = malloc (sizeof (GLdouble) * (sidelen * sidelen * sidelen) * 6 * 4 * 3);
  vertex_idx = malloc (sizeof (GLuint) * (sidelen * sidelen * sidelen) * 6 * 4);
  colors     = malloc (sizeof (GLdouble) * (sidelen * sidelen * sidelen) * 6 * 4 * 3);
  vertex_idxs = 0;
  //d// printf ("alloc %d %d\n", (sidelen * sidelen * sidelen) * 6 * 4 * 3, (sidelen * sidelen * sidelen) * 6 * 4);
}

double get_model (int x, int y, int z)
{
   return model[OFFS(x,y,z)];
}

unsigned int quad_vert_idx[6][4] = {
  {0, 1, 2, 3}, // front
  {1, 5, 6, 2}, // top
  {7, 6, 5, 4}, // back
  {4, 5, 1, 0}, // left
  {3, 2, 6, 7}, // right
  {3, 7, 4, 0}, // bottom
};

GLdouble quad_vert[8][3] = {
  { 0, 0, 0 },
  { 0, 1, 0 },
  { 1, 1, 0 },
  { 1, 0, 0 },
  { 0, 0, 1 },
  { 0, 1, 1 },
  { 1, 1, 1 },
  { 1, 0, 1 },
};

GLdouble light[6] = { 0.0, 0.15, 0.25, 0.2, 0.1, 0.05, };

void show_model ()
{
   if (!vertex_idxs)
     return;

  if (dl_dirty)
     {
       glNewList (dl, GL_COMPILE);
       glEnableClientState(GL_VERTEX_ARRAY);
       glEnableClientState(GL_COLOR_ARRAY);

       glVertexPointer (3, GL_DOUBLE, 0, vertexes);
       glColorPointer (3, GL_DOUBLE, 0, colors);
       glDrawElements (GL_QUADS, vertex_idxs, GL_UNSIGNED_INT, vertex_idx);

       glDisableClientState(GL_COLOR_ARRAY);
       glDisableClientState(GL_VERTEX_ARRAY);
       glEndList ();
       dl_dirty = 0;
     }

  glCallList (dl);
}

int is_carved (int x, int y, int z, int sx, int sy, int sz, double carve)
{
  if ((x - sx) < 0
      || (y - sy) < 0
      || (z - sz) < 0
      || (x + 1) > sidelen
      || (y + 1) > sidelen
      || (z + 1) > sidelen)
    return 1;

  double *cell = &(model[OFFS(x,y,z)]);

  if (carve < 0)
    {
      if (*cell > (1 - -carve))
        return 1;
    }
  else
    {
      if (*cell < carve)
        return 1;
    }

  return 0;
}

void add_face (int f, int x, int y, int z, double color)
{
  int h;

  double face_clr = color + light[f];
  if (face_clr > 1)
    face_clr = 1;

  for (h = 0; h < 4; h++)
    {
      GLdouble *vert = &(quad_vert[quad_vert_idx[f][h]][0]);

      vertexes[vertex_idxs * 3]     = vert[0] + x;
      vertexes[vertex_idxs * 3 + 1] = vert[1] + y;
      vertexes[vertex_idxs * 3 + 2] = vert[2] + z;

      colors[vertex_idxs * 3]     = face_clr;
      colors[vertex_idxs * 3 + 1] = face_clr;
      colors[vertex_idxs * 3 + 2] = face_clr;

      vertex_idx[vertex_idxs] = vertex_idxs;
      vertex_idxs++;
    }
}

void render_model (int skip_x, int skip_y, int skip_z, double carve)
{
  int x, y, z;

  memset (vertex_idx, 0, sizeof (GLuint) * (sidelen * sidelen * sidelen) * 6 * 4);
  vertex_idxs = 0;

  dl_dirty = 1;

  for (x = skip_x; x < sidelen; x++)
    for (y = skip_y; y < sidelen; y++)
      for (z = skip_z; z < sidelen; z++)
        {
          double *cell = &(model[OFFS(x,y,z)]);
          if (is_carved (x, y, z, skip_x, skip_y, skip_z, carve))
            continue;

          if (is_carved (x, y, z - 1, skip_x, skip_y, skip_z, carve))
            add_face (0, x, y, z, *cell);

          if (is_carved (x, y + 1, z, skip_x, skip_y, skip_z, carve))
            add_face (1, x, y, z, *cell);

          if (is_carved (x, y, z + 1, skip_x, skip_y, skip_z, carve))
            add_face (2, x, y, z, *cell);

          if (is_carved (x - 1, y, z, skip_x, skip_y, skip_z, carve))
            add_face (3, x, y, z, *cell);

          if (is_carved (x + 1, y, z, skip_x, skip_y, skip_z, carve))
            add_face (4, x, y, z, *cell);

          if (is_carved (x, y - 1, z, skip_x, skip_y, skip_z, carve))
            add_face (5, x, y, z, *cell);
        }

  printf ("rendered %d vertexes\n", vertex_idxs);
}

void *get_model_ptr ()
{
  return model;
}
